{"version":3,"file":"react-table.production.min.js","sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js"],"sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultColumn = {\n  Cell: ({ value = '' }) => value,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    !!(() => {\n      let proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function'\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    isFunctionComponent(component) ||\n    isExoticComponent(component)\n  )\n}\n","import React from 'react'\nimport { defaultColumn } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    Footer: () => <>&nbsp;</>,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(allColumns, defaultColumn) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nexport function unique(values) {\n  return [...new Set(values).values()]\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregatedValue) {\n            const aggregateValueFn =\n              typeof column.aggregateValue === 'function'\n                ? column.aggregateValue\n                : userAggregations[column.aggregateValue] ||\n                  aggregations[column.aggregateValue]\n\n            if (!aggregateValueFn) {\n              console.info({ column })\n              throw new Error(\n                `React Table: Invalid column.aggregateValue option for column listed above`\n              )\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column)\n          }\n          return columnValue\n        })\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    const cannnotPreviousPage = newPageIndex < 0\n    const cannotNextPage =\n      pageCount === -1\n        ? page.length < state.pageSize\n        : newPageIndex > pageCount - 1\n\n    if (cannnotPreviousPage || cannotNextPage) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = rowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && row.subRows) {\n        return row.subRows.forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n} from '../publicUtils'\n\nimport { getFirstDefined } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false,\n    })\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false,\n    })\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance({ plugins }) {\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n"],"names":["actions","init","defaultColumn","Cell","value","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","nextValue","process","env","NODE_ENV","console","info","Error","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","pluginIndex","findIndex","plugin","before","beforeIndex","functionalUpdate","updater","old","useGetLatest","obj","ref","React","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","isFunctionComponent","$$typeof","includes","description","isExoticComponent","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","join","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","decorateColumn","userDefaultColumn","Footer","makeHeaderGroups","allColumns","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","undefined","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","Set","size","emptyArray","emptyObject","resetGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","setGroupBy","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","groupedValues","leafValues","columnValue","aggregatedValue","aggregateValueFn","aggregateValue","aggregateFn","aggregate","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","resKey","reSplitAlphaNumeric","compareBasic","b","getRowValueByColumnID","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","sort","getTime","resetSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","cannnotPreviousPage","cannotNextPage","topRowIndex","floor","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","from","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_oldRowState$cellStat","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","addEventListener","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","flex","totalColumnsMinWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","instanceRef","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","duplicateColumns","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"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"}